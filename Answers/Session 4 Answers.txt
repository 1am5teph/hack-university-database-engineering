--1. Rename crimedataraw columns to follow postgres standards.  We should all end up with the exact same names.

ALTER TABLE crimedataraw RENAME "ID" TO id;
ALTER TABLE crimedataraw RENAME "RecordID" TO record_id;
ALTER TABLE crimedataraw RENAME "ReportDate" TO report_date;
ALTER TABLE crimedataraw RENAME "ReportTime" TO report_time;
ALTER TABLE crimedataraw RENAME "MajorOffenseType" TO major_offense_type;
ALTER TABLE crimedataraw RENAME "Address" TO address;
ALTER TABLE crimedataraw RENAME "Neighborhood" TO neighborhood;
ALTER TABLE crimedataraw RENAME "PolicePrecinct" TO police_precinct;
ALTER TABLE crimedataraw RENAME "PoliceDistrict" TO police_district;


--2. For each crime type, count the number of neighborhoods where it happened.
select major_offense_type, count(distinct neighborhood)
from crimedataraw
group by major_offense_type

--3. Create sentences for the different crime types saying "<crime type> isn't ok."
SELECT major_offense_type || ' isn''t ok.'
FROM crimedataraw
LIMIT 10 

--4. Extract distinct crime types from crimedataraw using SELECT INTO and then add an id column.
select distinct major_offense_type
into crime_types
from crimedataraw

--4.1 Add appropriate crime type id to crimedataraw.
alter table crime_types add column id serial;
alter table crimedataraw add column major_offense_type_id int;

update crimedataraw set major_offense_type_id = ct.id
from crime_types ct
where crimedataraw.major_offense_type = ct.major_offense_type;

--5. Repeat for neighborhood names using CREATE TABLE and not altering the table after.
create table neighborhoods
(
	id serial,
	neighborhood varchar
);

insert into neighborhoods (neighborhood)
select distinct neighborhood
from crimedataraw;

alter table crimedataraw add neighborhood_id int;

update crimedataraw set neighborhood_id = n.id
from neighborhoods n
where crimedataraw.neighborhood = n.neighborhood;

--6. Pull back the number of each crime type committed per neighborhood (0 if there were 0).
select n.neighborhood, ct.major_offense_type, count(cdr.id) as number_of_offenses
from neighborhoods n cross join crime_types ct 
left join crimedataraw cdr
	on cdr.neighborhood_id = n.id
		and cdr.major_offense_type_id = ct.id
group by n.neighborhood, ct.major_offense_type;

--checking my work
select count(*) from neighborhoods;
select count(*) from crime_types;
select 117*27;

--7. Show 10 crimes and the type of the previous crime committed in that same neighborhood.
select *, lag(cdr.major_offense_type, 1) over (partition by neighborhood_id order by report_date, report_time)
from crimedataraw cdr
limit 10


--8. Modify crime type table to include cost_per_crime and populate with data similar to what's found here http://www.rand.org/jie/justice-policy/centers/quality-policing/cost-of-crime.html  
--insert values into a temp table and do an join to allow an batch update to the major crime table.
CREATE TEMP TABLE costs_raw(offense varchar, cost int);

INSERT INTO costs_raw
VALUES ('Murder', 8649216),
	('Rape', 217866),
	('Robbery', 67277),
	('Aggravated Assault', 87238),
	('Burglary', 13096),
	('Larceny', 2139),
	('Motor Vehicle Theft', 9079)

SELECT *
FROM costs_raw cr FULL OUTER JOIN crime_types ct
	ON cr.offense = ct.major_offense_type;

ALTER TABLE costs_raw ADD mapping_name varchar;

UPDATE costs_raw SET mapping_name = offense;
UPDATE costs_raw SET mapping_name = 'Homicide'
WHERE offense = 'Murder';

SELECT *
FROM costs_raw cr FULL OUTER JOIN crime_types ct
	ON cr.mapping_name = ct.major_offense_type
WHERE ct.major_offense_type IS NULL

ALTER TABLE crime_types ADD cost integer;

UPDATE crime_types ct SET cost = cr.cost
FROM costs_raw cr
WHERE ct.major_offense_type = cr.mapping_name

SELECT *
FROM crime_types

--9. Pull back total crimes and total crime cost for each neighborhood.
SELECT neighborhood, COUNT(*), SUM(cost)
FROM crimedataraw cdr INNER JOIN crime_types ct
	ON cdr.major_offense_type_id = ct.ID
GROUP BY neighborhood

--10. Pull back total crimes and total crime cost for the neighborhood with the highest total cost.
SELECT neighborhood, COUNT(*), SUM(cost)
FROM crimedataraw cdr INNER JOIN crime_types ct
	ON cdr.major_offense_type_id = ct.ID
GROUP BY neighborhood
HAVING SUM(cost) IS NOT NULL
ORDER BY 3 DESC
LIMIT 1

