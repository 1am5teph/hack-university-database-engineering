CTE Expressions
WITH cte_name AS
(
	SELECT *
	FROM crimedataraw
), 
cte_name2 AS
(
	SELECT *
	FROM crimedataraw
)

UNION INTERCEPT EXCEPT

DELETE FROM table1 t1
USING table2 t2
WHERE t1.col1 = t2.col1

what's a domain
The full set of values that a column can hold.

Constraints
NULL/NOT NULL

CREATE TABLE table_name
(col1 any_of_the_constraints_below_referencing_this_column)


CREATE TABLE table_name
( 
	col1,
	any_of_the_constraints_below_referencing_any_column
)

naming the constraint is optional
[CONSTRAINT name] UNIQUE

CHECK (test_involving_column)
UNIQUE
PRIMARY KEY
REFERENCES other_table (col1, col2)
FOREIGN KEY (local_col1, local_col2) REFERENCES other_table (col1, col2)

Postgres Domain

CREATE INDEX index_name ON table_name (col1, col2);

ERD

Chen diagram is a rectangluar entity with elliptical attributes attached to it.  diamonds describe relationships.  double lines to attributes mean multi-valued (i.e., design isn't done there yet). Dashed line indicates a derived attribute.  Relationship cardinality is expressed as '(min, max)' on the 2 lines coming out of the relation.

Crow foot diagram has rectangle for each entity.  The rectangle is divided into two columns, the left having pk/fk tags and the right listing attributes.  It's also divided top and bottom where pk attributes appear above a line and other attributes below.  Relationships are expressed as lines between entites that have icons on the end: crows foot to say that multiple records in this entity appear in this relationship (no crows foot implies that it's never more than 1), two vertical bars for required, circle for optional (will be paired with crows foot), single vertical bar for required (will be paired with crows foot).  


UML (Unified Modeling Language)
Similar to crow foot except that only attribute names are listed in the entites and there are no crows feet.  Cardinality is expressed with 'min..max' on each end of a relationship.
assignments

Dependency
-knowing field A means that you automatically know field B.  E.g., zip_code->City

1st Normal Form 1NF
-no ordering for rows
-no ordering for columns
-no duplicate rows
-each "cell" only holds 1 value (neighborhood doesn't hold two distinct values)
-has primary key

2NF - not discussed often
-1NF
-if there is a composite candidate key (unique minimal key), it isn't possible to predict the value of any column if you know part of the candidate key (e.g., dependents->employee_id, dependent_id, name, employee_salary; employee_id, dependent_id would be a candidate key employee_budget could be determined from employee_id alone.)

3NF
-2NF
-There aren't any non-key columns that allow you to predict other non-key columns (e.g., crime_data->id, neighborhood, xcoord, ycoord).


denormalization
-Normal forms are great, but the most important thing is that the system works for your needs.
-reporting systems typically have different requirements than OLTP systems.

Dimensionality Analysis (star schema)
dimensions (string or time values typically) are extracted into dimension tables.  A fact table has numeric data and links to dimension tables (e.g., region, product, date, and sales_person are dimensions.  items_sold and total_value_sold are facts).



TASKS

1. select the crime types and counts into a temp table.  select 1 record from this table and thendelete that record.  Repeat until the table is empty.

2. create a CTE to join crimedataraw and the two related tables.  select * from it (10 rows).

3. load world data FROM postgres example db site INto new db called world

4. draw ERD for world

5. create a full join query using cross join and union

6. create a new varchar column called test_column on crimedataraw.  Run an update statement to assign the value 'value' to the test column for every row.  Write down how long it took.  Run the update several times.  Write down the execution time for each run.

7. create primary key constraints on all appropriate columns for 3 crime data tables

8. create foreign key constraints on all appropriate columns for crime data tables

9.1 join all three tables for crime data and pull back all the columns.  How long did it take?
9.2 create indexes on all id fields for crime data.
9.3 how long does the query from 8.1 take now?

10.1 use a correlated subquery on crime data tables
10.2 add an index for that subquery
10.3 how long does 9.1 take now?

11. create 3 new indexes on crimedataraw that include the column test_column.  How long does the update from 6 take now?

12. draw an ERD for our crime data.  What would you change to make it 3rd normal form?  What would you change to make it more useful for our queries?