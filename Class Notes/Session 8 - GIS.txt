Normalization removes redundancy from systems.  This is good.  But, sometimes, we want to have backup copies of our data.

RAID-Redundant Array of Inexpensive Devices
Image 3 identical disks.  Disks 1 and 2 hold data.  Disk 3 hold redundancy information.  For each bit on disk 1, do an exlusive or with disk 2 and store that value on disk 3.  If any disk fails, you could reconstruct all the data.  This is almost RAID 3.  There are about a half dozen different models with different characteristics.

Transaction Log
The database can fail at any point.  If it's updating data while it fails, there's no dependable way to know how far it had gotten in the write.  To deal with this, the DB writes everything twice.  First, it write into the transaction log that it's about to change some data and what the change will be exactly.  After, it changes the data.  Last, it goes back to the transaction log and writes that it finished changing the data.  If the system fails mid write, you either know that it hasn't started writing yet or exactly what it was writing; both would be enough to reconstruct a stable state of the DB.

DB Backups
If you don't want to reconstruct your data from scratch, you should back up you data now and then.  On postgres, use DB dumps for backups.  You can also store a baseline backup and all the transaction logs that have been generated since you took that backup.  On Postgres, transaction logs are recycled automatically.  This isn't the case on systems that expect professional DBAs to be involved.

Remove Current Install
sudo service postgresql stop
apt-get --purge remove postgresql\*

Install Newer Version and PostGIS
http://trac.osgeo.org/postgis/wiki/UsersWikiPostGIS22UbuntuPGSQL95Apt

Geographic Information Systems - track geographic data (closely related to geometric data)
PostGIS is the dominant Postgres GIS package and allows us to store, query, and transform GIS info.

Most GIS system have a few common shapes: point, linestring, polygon, multipoint, multilinestring, multipolygon, geometrycollection

CREATE TEMP TABLE geometries (name varchar, geom geometry);

INSERT INTO geometries VALUES
  ('Point', 'POINT(0 0)'),
  ('Linestring', 'LINESTRING(0 0, 1 1, 2 1, 2 2)'),
  ('Polygon', 'POLYGON((0 0, 1 0, 1 1, 0 1, 0 0))'),
  ('PolygonWithHole', 'POLYGON((0 0, 10 0, 10 10, 0 10, 0 0),(1 1, 1 2, 2 2, 2 1, 1 1))'),
  ('Collection', 'GEOMETRYCOLLECTION(POINT(2 0),POLYGON((0 0, 1 0, 1 1, 0 1, 0 0)))');

SELECT name, ST_ASTEXT(geom) 
FROM geometries;

SELECT name, ST_AREA(geom)
FROM geometries

Geometry is spatial data in a linear universe (such as ours).  Geography is spatial data in a spherical universe (such as the surface of the earth)

-- Distance calculation using GEOGRAPHY (122.2km)
  SELECT ST_DISTANCE('LINESTRING(-122.33 47.606, 0.0 51.5)'::GEOGRAPHY, 'POINT(-21.96 64.15)':: GEOGRAPHY);
-- Distance calculation using GEOMETRY (13.3 "degrees")
  SELECT ST_DISTANCE('LINESTRING(-122.33 47.606, 0.0 51.5)'::GEOMETRY, 'POINT(-21.96 64.15)':: GEOMETRY);

See that calculation on a map
http://gc.kls2.com/cgi-bin/gc?PATH=SEA-LHR

Shapes exist as both geometries and geographies.  Math on geometry is easier, so there are more functions there.

Coordinate Spaces - how to represent a 3 dimensional round surface on 2 dimensions.
E.g., Latitude/Longitude, Oregon Coordinate Reference System

Spatial Reference System Identifier = a number that uniquely defines how to read the two dimensions.

PostGIS only supports 4326 (lat/long) as of v 2.1

If the SRIDs of two sets of data aren't the same, the data isn't compatible and you can't combine the two sets until you've corrected the difference.

Shp files come in sets. .prj can be sent to http://prj2epsg.org/search to determine SRID.  Other files typically loaded automatically with the shp file.

Get map shape file for Portland here:
https://www.openstreetmap.org/
https://mapzen.com/data/metro-extracts/
Choose mposm.shp

unzip to /vagrant/data/osm
create DB osm and setup postGIS extensions there.
connect to osm and use shp2pgsql-gui to load portland_oregon_osm_roads.shp

--Find streets that intersect with NW Glisan
SELECT g1.name, g2.name, ST_ASTEXT(ST_INTERSECTION(g1.geom, g2.geom))
FROM public.portland_oregon_osm_roads g1 INNER JOIN public.portland_oregon_osm_roads g2
	ON ST_CROSSES(g1.geom, g2.geom)
WHERE g1.name = 'Northwest Glisan Street'
ORDER BY ST_X(ST_INTERSECTION(g1.geom, g2.geom))

Load shapes.txt from trimet gtfs data.

Each point of a line shows up as its own record, we'd rather see the data combined.
SELECT shape_id, ST_MakeLine(ST_SetSRID(ST_MakePoint(shape_pt_lat, shape_pt_lon), 4326) ORDER BY shape_pt_sequence) as shape
INTO shapes_combined
FROM shapes
GROUP BY shape_id


Geocoders are software that take addresses and convert them to coordinates.  Addresses should be standardized before using a geocoder.

Tutorial if you want to know more
http://workshops.boundlessgeo.com/postgis-intro/index.html

Tools for working with GTFS files
http://transitdata.net/using-gtfs-and-postgis-to-calculate-levels-of-scheduled-service/
https://github.com/laidig/gtfs_SQL_importer
